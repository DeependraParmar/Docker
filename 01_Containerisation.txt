Why containerisation?

1. Everyone has different Operating Systems.
2. Steps to run a project can based on OS.
3. Extremely harder to keep trach of dependencies as project grows.
4. What is there was a way to describe your projects configuation(database, dependencies, their versions, etc) in a single file(docker file)?
5. What if that could be run in an isolated environment(env under abstract layer)?
6. Makes local setup of OS projects a breeze
7. Makes installing auxiliary services like databases, caches, etc a breeze
8. Just kill the container and get rid of all the dependencies when you are done.

______________________________________________________________________________________________________________

## Containerisation
Containerization involves building self-sufficient software packages that perform consistently, regardless of the machines they run on. Its basically taking the snapshot of a machine, the filesystem and letting you use and deploy it as a construct.

______________________________________________________________________________________________________________

## Docker
Docker is a platform for developers and sysadmins to develop, ship, and run applications. Docker lets you quickly assemble applications from components and eliminates the friction that can come when shipping code. Docker lets you get your code tested and deployed into production as fast as possible.
- Makes it easier to create, deploy, and run applications by using containers.
- Allows for container orchestration which makes deployment a breeze.

______________________________________________________________________________________________________________

Docker has 3 major parts:
1. CLI: Command Line Interface which helps you to write  commands to interact with the docker daemon.
2. Docker Engine: A client-server application with these major components:
    - A server which is a type of long-running program called a daemon process (the dockerd command).
    - A REST API which specifies interfaces that programs can use to talk to the daemon and instruct it what to do.
    - A command line interface (CLI) client (the docker command).

3. Docker Registry: A place where you can store and share your images. Docker Hub is a public registry that anyone can use, and Docker is configured to look for images on Docker Hub by default. You can even run your own private registry.

______________________________________________________________________________________________________________

## Docker Image 
Docker image is a template from which consistent containers can be created. If docker was a traditional virtual machine, the could be like an ISO file used to install your VM. It basically has the file-system, codebase, network configuation, etc. 
- Image is created only once from a particular codebase or application.
- The image is what we sent to the dockerhub.

______________________________________________________________________________________________________________

## Docker Container
A container is a runtime instance of a docker image. It is a lightweight, standalone, executable, independent, abstract, isolated package of software that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files.
- You can run multiple containers from a single image in order to scale horizontally.

______________________________________________________________________________________________________________

## Caching and layers in Docker

Every command in the docker file( FROM, WORKDIR, COPY, RUN, etc) create a new layer in the docker image. When you run a container, the layers are stacked on top of each other to create the container.

FROM: Creates a new layer which basically pulls the image from the dockerhub specifying the base image.
WORKDIR: Creates a new layer which sets the working directory for the image.
COPY: Creates a new layer which copies the files from the host to the image.
RUN: Creates a new layer which runs the command in the image.

When you run a container, the layers are stacked on top of each other to create the container. If a layer is changed, only that layer and the layers above it are rebuilt. This is called caching. The process of preserving the state of a particular layer which has not got any new changes in order to boost the build process is called as caching. 

For eg: If the layer 2 changed, layer 3 and the layer 4 are going to be rebuilt from scratch. Layer 1 being intact is going to be cached.

______________________________________________________________________________________________________________

## Why Layers ?

> Caching
> Re-using layers
> Faster build times.

______________________________________________________________________________________________________________

## Volumes and Networks in Docker 

1. Docker is also used to run the databases, redis, auxiliary services locally iin order to prevent the local machine from getting cluttered and getting polluted from the unnecessary dependencies.
2. We can bring up and down the dbs, redia, kafka and clean out our local machine.

Problems: 
1. We want local databases to retain information across restarts especially for databases : SOLVED WITH VOLUMES
2. We want to allow one docker container to talk to another docker container (eg: backend to database) : SOLVED WITH NETWORKS

______________________________________________________________________________________________________________

Volumes: Volumes are used for persisting data across starts specially seful for things like databases.
- Volumes are a way to persist data in the host machine.
- Volumes are a way to share data between the host and the container.
- Volumes are a way to share data between containers.

______________________________________________________________________________________________________________

Networks: Networks are used to allow one container to talk to another container.
- If you containerize the backend and the database, you need to allow the backend to talk to the database. If you ping localhost in the backend and the db, it will hit the localhost of the container and not the host which means they have the scope only inside the container.
- In order to establish communication between the backend and the databse, we need to create a network between the backend and the database service.

- Containers have their own network.  

______________________________________________________________________________________________________________

## Environment Variables in Docker Containers

It helps you prevent the environment variables from being hardcoded in the codebase. It helps you to keep the sensitive information like the database password, the API keys, etc in the environment variables.

______________________________________________________________________________________________________________

## Multi-stage builds in Docker

What if you want to allow dev backend to hot reload but the prod env to not ?

Multi-stage builds are a way to use multiple Dockerfiles in a single Dockerfile. It allows you to use different base images for different stages of the build. It allows you to use different base images for different stages of the build.

For eg: You can use node:alpine for the dev stage and node:slim for the prod stage.

______________________________________________________________________________________________________________

## Docker Compose

